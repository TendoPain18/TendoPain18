name: Sync Contact Section to All Repos

on:
  push:
    branches: [main]
    paths:
      - 'README.md'
  workflow_dispatch:

jobs:
  sync-contact:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout profile repo
        uses: actions/checkout@v3
        with:
          path: profile
      
      - name: Extract contact section
        run: |
          cd profile
          if grep -q "<!-- CONTACT -->" README.md && grep -q "<!-- END CONTACT -->" README.md; then
            sed -n '/<!-- CONTACT -->/,/<!-- END CONTACT -->/p' README.md > contact.md
            echo "Contact section extracted successfully"
            cat contact.md
          else
            echo "ERROR: Contact markers not found in profile README"
            exit 1
          fi
      
      - name: Get all repositories
        id: get-repos
        run: |
          curl -s -H "Authorization: token ${{ secrets.PAT_TOKEN }}" \
            "https://api.github.com/users/TendoPain18/repos?per_page=100&type=owner" | \
            jq -r '.[].name' | grep -v "^TendoPain18$" > repos.txt
          
          echo "Found repositories:"
          cat repos.txt
      
      - name: Update all repos with contact tags
        env:
          GITHUB_TOKEN: ${{ secrets.PAT_TOKEN }}
        run: |
          updated_repos=0
          skipped_repos=0
          error_repos=0
          updated_list=""
          skipped_list=""
          
          while IFS= read -r repo; do
            echo ""
            echo "======================================="
            echo "Checking repository: $repo"
            echo "======================================="
            
            if git clone "https://${{ secrets.PAT_TOKEN }}@github.com/TendoPain18/${repo}.git" "repo_${repo}" 2>/dev/null; then
              cd "repo_${repo}"
              
              if [ ! -f "README.md" ]; then
                echo "No README.md found, skipping"
                cd ..
                rm -rf "repo_${repo}"
                skipped_repos=$((skipped_repos + 1))
                skipped_list="${skipped_list}- ${repo} (no README.md)\n"
                continue
              fi
              
              if grep -q "<!-- CONTACT -->" README.md && grep -q "<!-- END CONTACT -->" README.md; then
                echo "Contact tags found! Updating..."
                
                # Create temporary file with the replacement
                awk '
                  /<!-- CONTACT -->/ {
                    print
                    while ((getline line < "../profile/contact.md") > 0) {
                      if (line !~ /<!-- CONTACT -->/ && line !~ /<!-- END CONTACT -->/) {
                        print line
                      }
                    }
                    close("../profile/contact.md")
                    found_end = 0
                    while (getline > 0) {
                      if (/<!-- END CONTACT -->/) {
                        print
                        found_end = 1
                        break
                      }
                    }
                    if (!found_end) exit 1
                    next
                  }
                  /<!-- END CONTACT -->/ && !done {
                    next
                  }
                  { print }
                ' README.md > README.tmp && mv README.tmp README.md
                
                git config user.name "Contact Sync Bot"
                git config user.email "github-actions[bot]@users.noreply.github.com"
                
                if git diff --quiet README.md; then
                  echo "No changes needed, already up to date"
                  skipped_repos=$((skipped_repos + 1))
                  skipped_list="${skipped_list}- ${repo} (already up to date)\n"
                else
                  git add README.md
                  git commit -m "chore: Auto-sync contact section from profile"
                  
                  if git push; then
                    echo "Successfully updated!"
                    updated_repos=$((updated_repos + 1))
                    updated_list="${updated_list}- ${repo}\n"
                  else
                    echo "Failed to push changes"
                    error_repos=$((error_repos + 1))
                  fi
                fi
              else
                echo "No contact tags found, skipping"
                skipped_repos=$((skipped_repos + 1))
                skipped_list="${skipped_list}- ${repo} (no contact tags)\n"
              fi
              
              cd ..
              rm -rf "repo_${repo}"
            else
              echo "Failed to clone repository"
              error_repos=$((error_repos + 1))
            fi
          done < repos.txt
          
          echo ""
          echo "======================================="
          echo "         SYNC SUMMARY"
          echo "======================================="
          echo "Updated: $updated_repos repositories"
          echo "Skipped: $skipped_repos repositories"
          echo "Errors: $error_repos repositories"
          echo "======================================="
          
          # Save summary data for next step
          echo "updated_repos=${updated_repos}" >> $GITHUB_ENV
          echo "skipped_repos=${skipped_repos}" >> $GITHUB_ENV
          echo "error_repos=${error_repos}" >> $GITHUB_ENV
          echo "UPDATED_LIST<<EOF" >> $GITHUB_ENV
          echo -e "${updated_list}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          echo "SKIPPED_LIST<<EOF" >> $GITHUB_ENV
          echo -e "${skipped_list}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create job summary
        run: |
          echo "## 🔄 Contact Section Sync Complete" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "The contact section has been synchronized across all repositories with contact tags." >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Summary Statistics" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ **Updated:** ${{ env.updated_repos }} repositories" >> $GITHUB_STEP_SUMMARY
          echo "- ⏭️ **Skipped:** ${{ env.skipped_repos }} repositories" >> $GITHUB_STEP_SUMMARY
          echo "- ❌ **Errors:** ${{ env.error_repos }} repositories" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [ "${{ env.updated_repos }}" != "0" ]; then
            echo "### ✅ Updated Repositories" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${{ env.UPDATED_LIST }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          if [ "${{ env.skipped_repos }}" != "0" ]; then
            echo "### ⏭️ Skipped Repositories" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "${{ env.SKIPPED_LIST }}" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "---" >> $GITHUB_STEP_SUMMARY
          echo "*Check the detailed logs above for more information about each repository.*" >> $GITHUB_STEP_SUMMARY
